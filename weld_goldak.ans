
/solu			

!  solver settings, if PCG doesn't work use SRAPSE	
ANTYPE,4
EQSLV,PCG
TRNOPT,full
NEQIT,60
thopt,full
!------------Parameters (assumed unit system: MKS)---------------
!------------Laser direction (local coord system): X-------------
pi = 3.14159

L_y = 0.0012							!y radius in local 
L_z = 0.0010							!z radius in local 
L_x1 = 0.002							!x front radius in local 
L_x2 = 0.004							!x rear radius in local 


ff = 1.33						! front factor
fr = 2-ff						! rear factor (preset, don't change)

W_p = 884/.8						! W, energy
vel = 780/1000/60				! velocity
	
amb_temp = 20				! ambient temperature, used to fix dead elements temp

time_cool = 20					! cooling time after welding was finished

select_ratio = 5				! multiplier for selection in a sphere

L_select = L_x2 * select_ratio
!--------------Paths---------------
!#
path_num = 1				!number of paths
*dim,x_start,array,path_num
*dim,y_start,array,path_num
*dim,z_start,array,path_num
*dim,x_finish,array,path_num
*dim,y_finish,array,path_num
*dim,z_finish,array,path_num
*dim,z_angle,array,path_num
*dim,steps,array,path_num

! for more than 1 path just list items like this: "steps(1) = 120, 100, 50, ..."
steps(1) = 120		!steps each path is divided in
!starting coordinates
x_start(1) = 0.0					
y_start(1) = 0.001					
z_start(1) = 0.02		
!finish coordinates			
x_finish(1) = 0.0				
y_finish(1) = 0.001						
z_finish(1) = 0.08	
! rotation around x to point upwards normal vector (z) after all other rotations
z_angle(1) = 90
		
!------------Processing-------------
! cmsel,s,killed_elems		! kill elements in "killed_elems" selection
! ekill,all


time_weld_overall = 0			! overall process time
csys,0				!set active CS to 0 (global cartesian)

!local csys numbers
csys_num_cart = 120			
csys_num_cyl = 121
csys_num_sph = 122
! loop over each path
*do,kk,1,path_num
	! path length
	direct_len = ((x_start(kk)-x_finish(kk))**2 + (y_start(kk)-y_finish(kk))**2 + (z_start(kk)-z_finish(kk))**2)**0.5
	! guide angles
	cos_x = (x_finish(kk)-x_start(kk)) / direct_len
	cos_y = (y_finish(kk)-y_start(kk)) / direct_len
	cos_z = (z_finish(kk)-z_start(kk)) / direct_len

	! starting positions for each component
	x_s_active = x_start(kk)
	y_s_active = y_start(kk)
	z_s_active = z_start(kk)
	
	time_weld = direct_len/vel					! welding time for path
	time_step_weld = time_weld/steps(kk)		! timestep for each new heat source position

	! loop over each step in a path
	*do,ii,1,steps(kk)+1
		esel,all
		bfedele,all,HGEN		! deleting all heat generation from previous step
		ddele,all,temp			! deleting all temperature constraints, used for deleting temp from dead elements
		
		time_stepped = ii*time_step_weld	! time of the welding process for a path
		time_sol = (ii-1)*time_step_weld	! time for calculating current position of the heat source

		! set solution time to the time of the current step + time accumulated from previous steps
		wtime = time_weld_overall+time_stepped
		time,wtime

		! current heat source position
		x_weld = x_s_active+vel*time_sol*cos_x
		y_weld = y_s_active+vel*time_sol*cos_y
		z_weld = z_s_active+vel*time_sol*cos_z

		! rotations to aligne local coordinate system with x facing weld path and z as upper normal
		*afun,deg
		*if,cos_y,eq,0,then
			ang_x = 0
		*else
			ang_x = acos(cos_x)*SIGN(1,cos_y)
		*endif
		ang_y = -(90-acos(cos_z))*SIGN(1,cos_x)
		ang_z = z_angle(kk)
		*afun,rad
		

		! NOTE: so i tried to fix axis aligment but im not sure if it's 100% reliable


		*afun,deg	! set to degrees
		! "clocal" creates CS based on the current active CS
		clocal,csys_num_cart,cart,x_weld,y_weld,z_weld,ang_x,0,0
		clocal,csys_num_cart,cart,0,0,0,0,0,ang_y
		clocal,csys_num_cart,cart,0,0,0,0,ang_z,0	
		clocal,csys_num_cyl,cylin,0,0,0	
		clocal,csys_num_sph,sphe,0,0,0
		*afun,rad	! set to radians
		
		! -------------------------------------------------
		! this block is with mechanics of element birth and death, i decided to comment it out
		! -------------------------------------------------
		! select dead elements in a an a sphere
		! NOTE: you need to define element selection of each weld as weld_1, weld_2, etc for it to work
		
		! csys,csys_num_sph
		! nsel,s,loc,x,0,L_select
		! esln
		! cmsel,r,weld_%kk%
		! esel,u,live
		! ealive,all
		
		! fix dead elements temperature as ambient
		! dead elements still receive heat if you don't do this
		
		! esel,s,live
		! nsle
		! nsel,inve
		! d,all,temp,amb_temp
		
		! -------------------------------------------------
		! -------------------------------------------------
		! -------------------------------------------------
		
		! select all viable elements to apply heat to
		cmsel,s,heated_elements			! heated_elements is a selection of elements that can receive heat 
		csys,csys_num_sph
		nsel,s,loc,x,0,L_select			! select elements in a sphere around current center
		esln
		esel,r,live						! apply heat only for live elements
		csys,0
		cm,selected_elements,elem

		! loop over all selected elements
		cmsel,s,selected_elements
		curr_el = 0
		curr_el = elnext(curr_el)	! get number of the next element in the selection
		*dowhile,curr_el
			! if "curr_el" equal to the highest element number in the 
			! selection it will return 0 thus we ensure we looped over selection completely

			! get current element position in local CS
			csys,csys_num_cart
			*get,x1,elem,curr_el,cent,x
			*get,y1,elem,curr_el,cent,y
			*get,z1,elem,curr_el,cent,z
			
			! selecting if front or rear
			*if,x1,gt,0,then 
				L_x = L_x1
				f1 = ff
			*else
				L_x = L_x2
				f1 = fr
			*endif

			! applying heat generation on elements
			! NOTE: this is a sub-optimal solution, it is neccessary to avoid repeated calculations
			! 		as much as possible for speed (even tho it might seem insignificant it all adds up in big simulations)
			! 		so you should divide this formulas into parts that can be calculated outside the loop for reuse and parts
			! 		which you need to recalculate for every element
			part1 = (6*(3**0.5)*f1*W_p) / (L_x*L_y*L_z*pi*(pi**0.5))
			part2 = (exp(-3*(x1/L_x)**2)) * (exp(-3*(y1/L_y)**2)) * (exp(-3*((z1/L_z)**2)))
			qf = part1*part2 
			bfe,curr_el,HGEN,,qf	! apply heat to the current element
			
			! get next element number
			cmsel,s,selected_elements
			curr_el = elnext(curr_el)
		*enddo

		allsel					! always "allsel" before solve
		solve

		csys,0					! returning to global csys
	*enddo
	
	! add time for current path to overall time
	time_weld_overall = time_weld_overall+time_weld
	esel,all
	bfedele,all,HGEN		! deleting all heat generation
*enddo

! cooling step
allsel
TIME,time_weld_overall
autots,on    						! use automatic time-stepping
deltim, 10, 5, 40, on
TIME,time_weld_overall + time_cool	! cooling time

allsel
solve
